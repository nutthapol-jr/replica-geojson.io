import type { NextPage } from "next";
import { Button, Grid, Modal, Text } from "@nextui-org/react";
import { Fragment, useEffect, useState } from "react";
import Head from "next/head";
import dynamic from "next/dynamic";
import { Map, MapLibreEvent } from "maplibre-gl";
import MapboxDraw from "@mapbox/mapbox-gl-draw";
// import ReactJson from "react-json-view";
import { FeatureCollection } from "geojson";
import Banner from "../components/banner";
import CommonControl from "../components/common-control";
import Basemap from "../components/basemap";
import "maplibre-gl/dist/maplibre-gl.css";
import "@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css";
import DrawTool from "../components/draw-tool";

const ReactJson = dynamic(() => import("react-json-view"), {
  ssr: false,
});

const Home: NextPage = () => {
  const [map, setmap] = useState<Map | undefined>(undefined);
  const [geojson, setgeojson] = useState<FeatureCollection>({
    features: [],
    type: "FeatureCollection",
  });
  const [errorModal, seterrorModal] = useState<boolean>(false);

  useEffect(() => {
    const mapInit = new Map({
      style:
        "https://cloud.vallarismaps.com/core/api/styles/1.0-beta/styles/637d90c37097ddd6be5e1383?api_key=Kpd3mZgizcJWSceiU4Bec8JXIP407fJ4Bu3nJ7HbZRjLz80NZIe850yeSPPre6LS",
      container: "map-container",
      hash: true,
    });
    const Draw = new MapboxDraw();
    mapInit.addControl(Draw as any, "top-right");
    mapInit.once("load", (event: MapLibreEvent) => {
      const initGeojson = Draw.getAll();
      event.target.on("draw.create", (e: any) => {
        setgeojson((prev) => ({
          ...prev,
          features: [...prev.features, ...e.features],
        }));
      });
      event.target.on("draw.update", (e: any) => {
        setgeojson((prev) => ({
          ...prev,
          features: prev.features.map((f) =>
            f.id === e.features[0].id ? e.features[0] : f
          ),
        }));
      });
      setgeojson(initGeojson);
      setmap(event.target);
    });
    return () => {
      setmap(undefined);
      mapInit.remove();
    };
  }, []);

  const onUpdateJson = (event: any) => {
    const draw = (map as any)._controls.find((c: any) => c.modes);
    const onlyProperties = event.namespace.findIndex(
      (p: string) => p === "properties"
    );
    if (onlyProperties >= 0 || event.name === "properties") {
      draw.set(event.updated_src);
      setgeojson(event.updated_src);
    } else {
      seterrorModal(true);
      setgeojson(event.existing_src);
    }
  };

  return (
    <Fragment>
      <Head>
        <title>FOSS4G Thailand | Replica GeoJson.io</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid.Container gap={0} css={{ height: "100vh" }}>
        <Grid xs={8} id="map-container">
          <CommonControl map={map as any} setgeojson={setgeojson} />
          <Banner />
          <Basemap map={map as any} />
          <DrawTool map={map as any} setgeojson={setgeojson} />
        </Grid>
        <Grid xs={4}>
          <ReactJson
            src={geojson}
            name={false}
            theme="tomorrow"
            iconStyle="square"
            enableClipboard={false}
            displayDataTypes={false}
            displayObjectSize={false}
            collapsed={false}
            onAdd={onUpdateJson}
            onDelete={onUpdateJson}
            onEdit={onUpdateJson}
            style={{
              width: "100%",
              padding: 8,
              height: "100vh",
              overflowY: "auto",
            }}
          />
        </Grid>
      </Grid.Container>
      <Modal
        aria-labelledby="modal-title"
        open={errorModal}
        onClose={() => seterrorModal(false)}
      >
        <Modal.Header>
          <Text b size={18}>
            Warnning!!
          </Text>
        </Modal.Header>
        <Modal.Body>
          <Text>Can update only properties.</Text>
        </Modal.Body>
        <Modal.Footer>
          <Button auto flat color="error" onClick={() => seterrorModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
    </Fragment>
  );
};

export default Home;
